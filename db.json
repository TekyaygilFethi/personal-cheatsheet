{
  "_default": {
    "2": {
      "type": "Audio",
      "desc": "MP3 \u2192 WAV",
      "cmd": "for f in *.mp3; do ffmpeg -i \"$f\" -acodec pcm_s16le -ac 1 -ar 16000 \"wav-exports/${f%.}.wav\"; done"
    },
    "3": {
      "type": "Video",
      "desc": "MP4 \u2192 PNG",
      "cmd": "for f in *.mp4; do ffmpeg -i \"$f\" -vf fps=2 png-exports/${f%.*}_%06d.png; done"
    },
    "4": {
      "type": "Image",
      "desc": "PNG Sequence to MP4",
      "cmd": "ffmpeg -f image2 -r 15 -i _%4d.png -vcodec libx264 -crf 18  -pix_fmt yuv420p test.mp4"
    },
    "5": {
      "type": "File",
      "desc": "Delete Files Recursively",
      "cmd": "find e -maxdepth 10 -type f -name \".*\" -delete"
    },
    "6": {
      "type": "Machine Learning",
      "desc": "Remove Outliers",
      "cmd": "import numpy as np\nimport pandas as pd\n\n\ndef median(arr):\n    m, n = arr.shape\n    middle = np.arange((m - 1) >> 1, (m >> 1) + 1)\n    arr = np.partition(arr, middle, axis=0)\n    return arr[middle].mean(axis=0)\n\n\ndef remove_outliers(arr, threshold=6):\n    m = median(arr)\n    s = np.abs(arr - m)\n    return arr[(s < median(s) * threshold).all(axis=1)]"
    },
    "7": {
      "type": "Python",
      "desc": "Time It",
      "cmd": "from functools import wraps\nimport time\n\n\ndef timeit(func):\n    @wraps(func)\n    def timeit_wrapper(*args, **kwargs):\n        start_time = time.perf_counter()\n        result = func(*args, **kwargs)\n        end_time = time.perf_counter()\n        total_time = end_time - start_time\n        print(f'Function {func.__name__}{args} {kwargs} Took {total_time:.4f} seconds')\n        return result\n    return timeit_wrapper\n\n\n@timeit"
    },
    "8": {
      "type": "Python",
      "desc": "Merge .npz Files",
      "cmd": "import numpy as np\nimport os\n\nfiles = [i for i in os.listdir(\".\") if i.endswith(\".npz\")]\n\ndimension = np.load(files[0])[\"embeddings\"].shape[1]\n\ndata = np.zeros((1, dimension))\n\nfor file in files:\n    temp = np.load(file)[\"embeddings\"]\n    data = np.concatenate((data, temp), axis=0)\n    print(\"Done\", file, data.shape[0])\n\nnp.savez('merged_embeddings.npz', data)"
    }
  }
}
